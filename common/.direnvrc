# -*- mode: sh; -*-

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found. Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  # create venv if it doesn't exist
  poetry run true

  VIRTUAL_ENV=$(poetry env info --path) || exit 2
  export VIRTUAL_ENV
  export POETRY_ACTIVE=1
  PATH_add "$VIRTUAL_ENV/bin"
}

# Usage: layout uv
#
# Enables the uv project layout in the current directory, and syncs
# the dependencies in the project.
#
# This relies on the `uv` command being available in the PATH, and performs a
# sync on cd because uv is fast enough it's not impactful. It relies on uv's
# configuration file and environment variables, rather than arguments.
#
layout_uv() {
  # Watch the uv configuration file for changes
  watch_file .python-version pyproject.toml uv.lock

  # Use --frozen so that direnv entry does not change the lock contents. This
  # can fail if the lock file is badly out of sync, but it'll report that to the
  # user and the resolution is obvious.
  uv sync --frozen || true

  # activate the virtualenv after syncing; this puts the newly-installed
  # binaries on PATH.
  venv_path="$(expand_path "${UV_PROJECT_ENVIRONMENT:-.venv}")"
  if [[ -e $venv_path ]]; then
    # shellcheck source=/dev/null
    source "$venv_path/bin/activate"
  fi
}
