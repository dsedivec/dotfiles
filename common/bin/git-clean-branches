#!/usr/bin/python3

import argparse
import enum
import logging as _logging
import subprocess
import sys


logger = _logging.getLogger(__name__)


class GitTool:
    def __init__(self):
        self._remotes_fetched = set()
        self._remotes_pruned = set()
        self._ref_existence = {}
        self._remotes = None

    def fetch_once(self, remote_name: str):
        if remote_name not in self._remotes_fetched:
            subprocess.check_call(["git", "fetch", remote_name])
            self._remotes_fetched.add(remote_name)

    def prune_once(self, remote_name: str):
        assert remote_name, repr(remote_name)
        if remote_name not in self._remotes_pruned:
            subprocess.check_call(["git", "remote", "prune", remote_name])
            self._remotes_pruned.add(remote_name)

    def refresh_remote_once(self, remote_name: str):
        self.fetch_once(remote_name)
        self.prune_once(remote_name)

    def get_current_branch_name(self):
        proc = subprocess.run(
            ["git", "symbolic-ref", "--short", "HEAD"],
            stdout=subprocess.PIPE,
            text=True,
        )
        if proc.returncode != 0:
            raise Exception(
                "git exited with error when determining current branch name"
            )
        current_branch = proc.stdout.strip()
        if not current_branch:
            raise Exception("Can't read current branch name")
        return current_branch

    def iter_branches_with_upstreams(self):
        for line in subprocess.check_output(
            [
                "git",
                "for-each-ref",
                ("--format=" "%(refname:short)%09%(upstream:remotename)%09%(upstream)"),
                "refs/heads/**",
            ],
            text=True,
        ).splitlines():
            try:
                local_branch, remote, upstream_branch = line.split("\t")
            except ValueError:
                logger.error("Error splitting git for-each-ref output, line=%r", line)
                raise
            if not local_branch:
                raise Exception("this should not happen")
            yield local_branch, remote or None, upstream_branch or None

    def ref_exists_cached(self, ref: str):
        assert ref, repr(ref)
        if ref not in self._ref_existence:
            self._ref_existence[ref] = (
                subprocess.run(
                    [
                        "git",
                        "rev-parse",
                        "--verify",
                        "--quiet",
                        "--end-of-options",
                        ref,
                    ],
                    stdout=subprocess.DEVNULL,
                    check=False,
                ).returncode
                == 0
            )
        return self._ref_existence[ref]

    def branch_contains(self, container: str, contained: str):
        proc = subprocess.run(
            [
                "git",
                "merge-base",
                "--is-ancestor",
                contained,
                container,
            ],
            check=False,
        )
        if proc.returncode == 0:
            return True
        elif proc.returncode == 1:
            return False
        proc.check_returncode()

    def get_remotes_cached(self):
        if self._remotes is None:
            remotes = set()
            for line in subprocess.check_output(
                ["git", "config", "--local", "--get-regexp", r"^remote\..+\.url$"],
                text=True,
            ).splitlines():
                remote = line.strip().split(None, 1)[0][7:-4]
                if not remote:
                    raise Exception(
                        "Failure parsing git config output for remotes: %r" % (remote,)
                    )
                remotes.add(remote)
            self._remotes = tuple(sorted(remotes))
        return self._remotes

    def get_remote_for_ref(self, ref: str):
        name = subprocess.check_output(
            ["git", "rev-parse", "--symbolic-full-name", ref], text=True
        ).strip()
        if not name.startswith("refs/remotes/"):
            return None
        name = name[len("refs/remotes/") :]
        for remote in self.get_remotes_cached():
            logger.debug("Checking if name=%r is from remote=%r", name, remote)
            if name.startswith(remote + "/"):
                break
        else:
            raise Exception("Can't find remote name for remote ref %r" % (ref,))
        return remote


@enum.unique
class Mode(enum.Enum):
    MERGED_WITH = 1
    MERGED_UPSTREAM = 2
    UPSTREAM_DELETED = 3


def main(argv):
    parser = argparse.ArgumentParser(prog=argv[0])
    mode_arg = parser.add_mutually_exclusive_group()
    mode_arg.add_argument(
        "--merged-with",
        "-m",
        default="origin/HEAD",
        help="Clean branches merged with some ref (default mode: %(default)s",
    )
    mode_arg.add_argument(
        "--merged-upstream",
        "-M",
        action="store_true",
        help="Clean branches merged with their upstream branch",
    )
    mode_arg.add_argument(
        "--upstream-deleted",
        "-u",
        action="store_true",
        help="Clean branches where the upstream branch has been deleted",
    )
    parser.add_argument(
        "--include-current",
        "-c",
        dest="exclude_current_branch",
        default=True,
        action="store_false",
        help=(
            "Consider cleaning up the current branch"
            " (default: current branch is excluded)"
        ),
    )
    parser.add_argument(
        "--include-main",
        dest="exclude_main",
        default=True,
        action="store_false",
        help=(
            'Consider cleaning up "main" and "master" branches'
            " (default: main and master are excluded)"
        ),
    )
    parser.add_argument(
        "--exclude",
        "-x",
        dest="excluded_branches",
        default=[],
        action="append",
        help="Exclude a branch from being cleaned up; may be used multiple times",
    )
    parser.add_argument(
        "--no-fetch",
        dest="fetch",
        default=True,
        action="store_false",
        help="Don't update remotes",
    )
    delete_parser = parser.add_mutually_exclusive_group()
    parser.set_defaults(delete=None)
    delete_parser.add_argument(
        "--delete",
        dest="delete",
        action="store_const",
        const="-d",
        help="Actually delete branches!",
    )
    delete_parser.add_argument(
        "--force-delete",
        dest="delete",
        action="store_const",
        const="-D",
        help="Actually delete branches with --force!!",
    )
    parser.add_argument("--debug", "-d", action="store_true")
    parser.add_argument("branches_to_check", nargs="*")
    args = parser.parse_args()
    _logging.basicConfig()
    if args.debug:
        logger.setLevel(_logging.DEBUG)
    if args.merged_upstream:
        mode = Mode.MERGED_UPSTREAM
    elif args.upstream_deleted:
        mode = Mode.UPSTREAM_DELETED
    else:
        mode = Mode.MERGED_WITH
    git = GitTool()
    if args.branches_to_check:
        branches_to_check = set(args.branches_to_check)
    else:
        branches_to_check = None
    excluded_branches = set(args.excluded_branches)
    if args.exclude_main:
        excluded_branches.update(("main", "master"))
    if args.exclude_current_branch:
        excluded_branches.add(git.get_current_branch_name())
    if mode == Mode.MERGED_WITH:
        if args.fetch:
            remote = git.get_remote_for_ref(args.merged_with)
            if remote:
                git.refresh_remote_once(remote)
        if not git.ref_exists_cached(args.merged_with):
            raise Exception("Can't find ref %r" % (args.merged_with,))
    branches_to_delete = set()
    for local_branch, remote, upstream_branch in git.iter_branches_with_upstreams():
        if branches_to_check and local_branch not in branches_to_check:
            continue
        if local_branch in excluded_branches:
            continue
        if mode == Mode.MERGED_UPSTREAM:
            if not upstream_branch:
                logger.debug(
                    "Silently skipping branch %r with no upstream", local_branch
                )
                continue
            if args.fetch:
                git.refresh_remote_once(remote)
            if not git.ref_exists_cached(upstream_branch):
                logger.warning(
                    "Upstream %r of %r does not exist, skipping",
                    upstream_branch,
                    local_branch,
                )
            elif git.branch_contains(upstream_branch, local_branch):
                branches_to_delete.add(local_branch)
        elif mode == Mode.UPSTREAM_DELETED:
            if not remote:
                continue
            if args.fetch:
                git.prune_once(remote)
            if not git.ref_exists_cached(upstream_branch):
                branches_to_delete.add(local_branch)
        else:
            assert mode == Mode.MERGED_WITH
            if git.branch_contains(args.merged_with, local_branch):
                branches_to_delete.add(local_branch)
    if args.delete:
        return subprocess.run(
            [
                "git",
                "branch",
                args.delete,
                "--",
                *sorted(branches_to_delete),
            ]
        ).returncode
    else:
        for branch in sorted(branches_to_delete):
            print(branch)
        return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
