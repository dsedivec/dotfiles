#!/usr/bin/env python3

import argparse
import itertools
import logging
import operator
import re
import sys
import typing as t


def iter_hunk_lines(
    lines: t.Iterator[str], old_lines_remaining: int, new_lines_remaining: int
):
    while old_lines_remaining > 0 or new_lines_remaining > 0:
        logging.debug(
            "Starting with old_lines_remaining=%r new_lines_remaining=%r",
            old_lines_remaining,
            new_lines_remaining,
        )
        try:
            line = next(lines)
        except StopIteration as ex:
            raise Exception from ex
        if not line:
            raise Exception("Unexpected end of diff")
        if line[0] not in " -+":
            raise Exception(f"Invalid line in hunk: {line!r}")
        logging.debug("Input line is: %r", line)
        yield line
        if line[0] == " ":
            old_lines_remaining -= 1
            new_lines_remaining -= 1
        elif line.startswith("-"):
            old_lines_remaining -= 1
        elif line.startswith("+"):
            new_lines_remaining -= 1
        logging.debug(
            "Ending with old_lines_remaining=%r new_lines_remaining=%r",
            old_lines_remaining,
            new_lines_remaining,
        )


def iter_hunks(
    diff: t.Iterator[str],
) -> t.Iterator[t.Tuple[int, t.Iterator[str]]]:
    for hunk_header in diff:
        if not hunk_header.strip():
            continue
        match = re.search(
            r"^@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@", hunk_header
        )
        if not match:
            raise Exception(f"Expected hunk header, found {hunk_header!r}")
        logging.debug("Starting hunk %r", hunk_header)
        # Note: group 3 in the above regexp is unused, but captured
        # anyway because I thought a little consistency was the least
        # I could do for you around all that line noise.
        old_lines_remaining = int(match.group(2) or 1)
        new_lines_remaining = int(match.group(4) or 1)
        line_num = int(match.group(1))
        yield (
            line_num,
            iter_hunk_lines(diff, old_lines_remaining, new_lines_remaining),
        )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", "-d", action="store_true")
    parser.add_argument("input_file", nargs="?")
    args = parser.parse_args()
    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)
    if args.input_file:
        input_fh = open(args.input_file, "rt")
    else:
        input_fh = sys.stdin
    output_fh = sys.stdout
    for line in input_fh:
        if line.startswith("--- "):
            break
    else:
        return
    line = input_fh.readline()
    if not line.startswith("+++ "):
        raise Exception(f"Expected +++ line, got {line!r}")
    for line_num, hunk_lines in iter_hunks(input_fh):
        # Group the lines into runs of lines that start with " "
        # (space), "+", or "-".
        for mode, mode_lines in itertools.groupby(
            hunk_lines, key=operator.itemgetter(0)
        ):
            if mode == " ":
                for _ in mode_lines:
                    line_num += 1
            elif mode == "-":
                delete_len = 0
                for _ in mode_lines:
                    delete_len += 1
                output_fh.write(f"d{line_num} {delete_len}\n")
                line_num += delete_len
            else:
                assert mode == "+", repr(mode)
                lines_to_add = list(mode_lines)
                # I dare you to try and understand this RCS diff
                # format we're producing.  See, for example,
                # https://github.com/raxod502/apheleia/blob/f865c165dac606187a66b2b25a57d5099b452120/apheleia.el#L158-L189.
                output_fh.write(f"a{line_num - 1} {len(lines_to_add)}\n")
                output_fh.writelines(line[1:] for line in lines_to_add)
                # line_num not incremented in this case because it
                # only counts lines in the original file, as required
                # by the RCS diff format.


if __name__ == "__main__":
    main()
